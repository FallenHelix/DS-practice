#include <bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp> // Include for built in treap
#include <ext/pb_ds/tree_policy.hpp>

template<typename... T>
void read(T&... args) {
	((cin >> args), ...);
}

template<typename... T>
void write(T&&... args) { //rvalue reference is new to C++ 
	((cout << args << " "), ...);
}

using namespace __gnu_pbds;
const int MOD = 1e9 + 7;
#define cer(x) cerr<<#x<<"="<<x<<'\n'
#define deb(x) cout<<#x<<"="<<x<<'\n'
#define deb2(x,y) cout<<#x<<"="<<x<<","<<#y<<"="<<y<<'\n'
#define deb3(x,y,z) cout<<#x<<"="<<x<<","<<#y<<"="<<y<<","<<#z<<"="<<z<<'\n'
#define fo(i, n) for(i=0; i<n; i++)
#define Fo(i, k, n) for(i=k; i<n; i++)
#define ll long long int
#define pii pair<int, int>
#define pll pair<ll, ll>
#define pb push_back
#define eb emplace_back
#define ff first
#define ss second
#define vi vector<int>
#define vl vector<ll>
#define vpii vector<pii>
#define vpll vector<pll>
#define si set<int>
#define mpii map<int, int>
#define prq priority_queue
#define sz(s) (int) s.size()
#define pf(a) printf("%d\n",a)
#define sc1(a) scanf("%d",&a)
#define sc2(a, b) scanf("%d%d",&a,&b)
#define pi 2 * acos (0.0)
#define inf 1e9
#define dbg cout<<"ok"<<endl;
#define FOR(i, j, k) for(int i=(j); i<(k); i++)
#define REV(i, j, k) for(int i=(n-1); i>=k; i--)
#define rnd(a, b) ((((rand()<<15)^rand())%((b)-(a) + 1))+(a))
#define FAST_IO ios_base::sync_with_stdio(false),cin.tie(NULL)
#define mem(x, y) memset(x, y, sizeof(x))
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pb_ds;
const double EPS = 1e-9;
const int MXX = 1e5 + 5;



// vi v;
// int j=0,node=0;
// void r(int i,int curr,int n)
// {
    
//     if(curr > n)
//     {
//         return;
//     }
//     if(curr == n)
//     {
     
//         ++j;
//         return;
//     }
//     if(i > v.size())
//     {
//         return;
//     }
//    if(i < v.size())
//     {
//         ++node;
//         int newSum=curr+v.at(i);       
//         r(i+1,newSum,n);
     
//         r(i+=1,curr,n);
//     }
// }


// int main() //1st version main();
// {
// 	FAST_IO;
//     int n,t,i,k;
    
//     // cin>>n;
//     v={};
//     // v.resize(n,-1);
//     // for(int i=0;i<n;++i)
//     // {
//     //     cin>>v.at(i);
//     // }
//     // cin>>t;
//     t=550;
//     r(0,0,t);
//     // deb(t);
    
//     // sumSubSet(v,t);
//     write("Number of Solutions: ",j,"\n");
//     write("NOdes : ",node,"\n");
//     return 0;
// }


vector<stack<int> > arr;

void printSol()
{
    for(auto x: arr)
    {
        while(!x.empty())
        {
            int temp=x.top();x.pop();
            cout<<temp<< " ";
        }
        cout<<endl;
    }
}
bool Safe(int sum, int tar){
    return (sum<=tar);
}
void compute(stack<int> &s, vector<int> &v,int sum,int t,int n,int x)
{
    if(sum>t)
    {
        return ;
    }
    else if(sum==t)
    {
        arr.push_back(s);
        return;
    }
   
    for(int i=x;i<n;++i)
    {
        if(sum+v.at(i)<=t)
        {
            s.push(v.at(i));// try by adding the node

            compute(s,v,sum+v.at(i),t,n,i+1);
            s.pop();//if adding doesn't work then just pop it out
        }
    }
     
    
}
int main()
{
    FAST_IO;
    int n,t;
    vector<int> v;
    cin>>n;
    v.resize(n,-1);
    for(int i=0;i<n;++i)
    {
        cin>>v.at(i);
    }
    sort(v.begin(),v.end());
    stack<int> s;
    cin>>t;
    compute(s,v,0,t,v.size(),0);
    cout<<"No of Solutions: "<<arr.size()<<endl;
    printSol();
    return 0;
}